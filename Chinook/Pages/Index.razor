@page "/"
@attribute [Authorize]

@using Chinook.ClientModels;
@using Chinook.Contracts;
@using Microsoft.EntityFrameworkCore
@inject IArtistService ArtistService

<PageTitle>Index</PageTitle>

<h1>Artists</h1>

@if (_artists == null)
{
    <Loading />
}
else
{
    <div class="form-group mb-2">
        <label for="ArtisSearch">Search Artists</label>
        <input type="text" id="ArtisSearch" class="form-control" placeholder="Artist name" @bind="_searchingArtistName" @oninput="OnInput">
    </div>

    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Name</th>
                <th>Number of albums</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var artist in _artists)
            {
                <tr>
                    <td><a href="Artist/@artist.ArtistId">@artist.Name</a></td>
                    <td>@artist.AlbumCount</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Artist> _artists;
    private string _searchingArtistName = string.Empty;
    private Timer _timer;

    protected override async Task OnInitializedAsync() {
        await InvokeAsync(StateHasChanged);
        _artists = await GetArtists();
    }

    public async Task<List<Artist>> GetArtists()
    {
        var artists = await ArtistService.GetArtistsAsync(_searchingArtistName);
        return artists;
    }

    private void OnInput(ChangeEventArgs e)
    {
        _searchingArtistName = e.Value.ToString();
        if (_timer != null)
        {
            _timer.Dispose();
        }
        _timer = new Timer(Search, null, 400, Timeout.Infinite);
    }

    private void Search(object state)
    {
        InvokeAsync(async () =>
        {
            _artists = await GetArtists();
            StateHasChanged();
        });
    }
}
