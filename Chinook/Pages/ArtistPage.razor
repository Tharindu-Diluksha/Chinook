@page "/artist/{ArtistId:long}"
@attribute [Authorize]

@using Chinook.Constants;
@using Chinook.Contracts;
@using Chinook.Models
@using Chinook.ClientModels
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;
@inject IArtistService ArtistService
@inject ITrackService TrackService
@inject IPlaylistService PlaylistService


@if (!string.IsNullOrWhiteSpace(_infoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @_infoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (_artist == null)
{
    <Loading />
}
else
{
    <h1>@_artist.Name</h1>
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Album title</th>
                <th>Track name</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var track in _tracks)
            {
                <tr>
                    <td>@track.AlbumTitle</td>
                    <td>@track.TrackName</td>
                    <td>
                        @if (track.IsFavorite)
                        {
                            <a href="#" class="m-1" title="Unmark as favorite" @onclick="@(async() => await UnfavoriteTrackAsync(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-fill"></i></a>
                        }
                        else
                        {
                            <a href="#" class="m-1" title="Mark as favorite" @onclick="@(async () => await FavoriteTrackAsync(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                        }
                        <a href="#" class="m-1" title="Add to playlist" @onclick="@(() => OpenPlaylistDialog(track.TrackId))" @onclick:preventDefault><i class="bi bi-file-earmark-plus"></i></a>
                    </td>
                </tr>
            }
        </tbody>
    </table>

}

@code {
    [Parameter] public long ArtistId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }
    private Modal _playlistDialog { get; set; }

    private ArtistClientModel _artist;
    private List<PlaylistTrackClientModel> _tracks;
    private PlaylistTrackClientModel _selectedTrack;
    private string _infoMessage;
    private string _currentUserId;
    private long _favouritePlayListId = -1;
    private List<PlaylistClientModel> _playlists;
    private long _selectedPlaylistId = -1;
    private string _newPlaylistName;

    protected override async Task OnInitializedAsync()
    {
        await InvokeAsync(StateHasChanged);
        _currentUserId = await GetUserId();

        _favouritePlayListId = await PlaylistService.GetFavouritePlaylistIdOfUserAsync(_currentUserId);

        _artist = await ArtistService.GetArtistByIdAsync(ArtistId);

        _tracks = await TrackService.GetTracksByArtistIdAsync(ArtistId, _currentUserId);

        _playlists = await PlaylistService.GetPlayListsAsync(_currentUserId);
    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private async Task FavoriteTrackAsync(long trackId)
    {
        if (_favouritePlayListId == -1) // No favourite playlist created yet
        {
            _favouritePlayListId = await PlaylistService.CreateNewPlaylistAsync(CommonConstant.UserFavouritePlayListName, _currentUserId);
        }

        await PlaylistService.AddTrackToPlaylistAsync(_favouritePlayListId, trackId);

        var track = _tracks.FirstOrDefault(t => t.TrackId == trackId);
        track.IsFavorite = true;
        _infoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist Favorites.";
    }

    private async Task UnfavoriteTrackAsync(long trackId)
    {
        await PlaylistService.RemoveTrackFromPlaylistAsync(_favouritePlayListId, trackId);

        var track = _tracks.FirstOrDefault(t => t.TrackId == trackId);
        track.IsFavorite = false;
        _infoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist Favorites.";
    }

    private void OpenPlaylistDialog(long trackId)
    {
        CloseInfoMessage();
        _selectedTrack = _tracks.FirstOrDefault(t => t.TrackId == trackId);
        _playlistDialog.Open();
    }

    private async Task AddTrackToPlaylistAsync()
    {
        CloseInfoMessage();

        if (_selectedPlaylistId != -1)
        {
            // Add the track to the existing playlist
            await PlaylistService.AddTrackToPlaylistAsync(_selectedPlaylistId, _selectedTrack.TrackId);
            _infoMessage = $"Track {_artist.Name} - {_selectedTrack.AlbumTitle} - {_selectedTrack.TrackName} added to playlist.";
        }
        else if (!string.IsNullOrEmpty(_newPlaylistName))
        {
            // Create a new playlist and add the track to it
            var newPlayListId = await PlaylistService.CreateNewPlaylistAsync(_newPlaylistName, _currentUserId);
            await PlaylistService.AddTrackToPlaylistAsync(newPlayListId, _selectedTrack.TrackId);
            _infoMessage = $"Playlist {_newPlaylistName} is created and Track {_artist.Name} - {_selectedTrack.AlbumTitle} - {_selectedTrack.TrackName} added to the playlist.";
        }

        // Close the modal
        _playlistDialog.Close();

        // Clear the form inputs
        _selectedPlaylistId = -1;
        _newPlaylistName = "";
    }

    private void CloseInfoMessage()
    {
        _infoMessage = "";
    }


}

<Modal @ref="_playlistDialog">
    <Title>
        Add to playlist
    </Title>
    <Body>
        @if (_selectedTrack != null)
        {
            <div class="form-group mb-2">
                <label>@_artist.Name - @_selectedTrack.AlbumTitle - @_selectedTrack.TrackName</label>
            </div>
        }

        <div class="form-group mb-2">
            <label for="ExistingPlaylist">Add to existing playlist</label>
            <select class="form-control" id="ExistingPlaylist" @bind="_selectedPlaylistId">
                <option value="-1">Select a playlist</option>
                @foreach (var playlist in _playlists)
                {
                    <option value=@playlist.Id>@playlist.Name</option>
                }
            </select>
        </div>
        <div class="form-group mb-2">
            <label for="NewPlaylist">Create new playlist</label>
            <input type="text" id="NewPlaylist" class="form-control" placeholder="Name for the new playlist" @bind="_newPlaylistName">
        </div>
    </Body>
    <Footer>
        <button class="btn btn-success" @onclick="@(async() => await AddTrackToPlaylistAsync())">Save</button>
    </Footer>
</Modal>
