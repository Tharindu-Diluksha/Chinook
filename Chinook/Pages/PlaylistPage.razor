@page "/playlist/{PlaylistId:long}"
@attribute [Authorize]

@using Chinook.ClientModels;
@using Chinook.Constants;
@using Chinook.Contracts;
@using Chinook.Exceptions;
@using Chinook.Models
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims;
@inject IPlaylistService PlaylistService; 

<h1>Playlist <strong>@_playlist.Name</strong></h1>

@if (!string.IsNullOrWhiteSpace(_infoMessage))
{
    <div class="alert alert-info fade show">
        <div class="d-flex align-items-start">
            <div class="flex-grow-1">
                @_infoMessage
            </div>
            <button type="button" class="btn-close" aria-label="Close" @onclick="CloseInfoMessage"></button>
        </div>
    </div>
}

@if (_playlist == null)
{
     <Loading />
}
else
{
    <table class="table table-striped table-hover table-sm">
        <thead>
            <tr>
                <th>Track</th>
                <th></th>
        </tr>
        </thead>
        <tbody>
            @foreach (var track in _playlist.Tracks)
            {
                <tr>
                    <td>@track.ArtistName - @track.AlbumTitle - @track.TrackName</td>
                    <td>
                        <div class="d-flex">
                            @if (_playlist.Name != CommonConstant.UserFavouritePlayListName)
                            {
                                @if (track.IsFavorite)
                                {
                                    <a href="#" class="m-1" title="Unark as favorite" @onclick="@(async () => await UnfavoriteTrackAsync(track.TrackId))" @onclick:preventDefault><i class="bi bi-star-fill"></i></a>
                                }
                                else
                                {
                                    <a href="#" class="m-1" title="Mark as favorite" @onclick="@(async () => await FavoriteTrackAsync(track.TrackId))" @onclick:preventDefault><i class="bi bi-star"></i></a>
                                }

                            }
                            <a href="#" class="m-1" title="Remove from this playlist" @onclick="@(async () => await RemoveTrackAsync(track.TrackId))" @onclick:preventDefault><i class="bi bi-trash"></i></a>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter] public long PlaylistId { get; set; }
    [CascadingParameter] private Task<AuthenticationState> authenticationState { get; set; }

    private PlaylistClientModel _playlist;
    private string _currentUserId;
    private string _infoMessage;
    private long _favouritePlayListId = -1;


    protected override async Task OnInitializedAsync()
    {
        _currentUserId = await GetUserId();
        _favouritePlayListId = await PlaylistService.GetFavouritePlaylistIdOfUserAsync(_currentUserId);
    }

    protected override async Task OnParametersSetAsync()
    {
        CloseInfoMessage();
        await InvokeAsync(StateHasChanged);
        _playlist = await PlaylistService.GetPlayListByIdAsync(PlaylistId, _currentUserId);
    }

    private async Task<string> GetUserId()
    {
        var user = (await authenticationState).User;
        var userId = user.FindFirst(u => u.Type.Contains(ClaimTypes.NameIdentifier))?.Value;
        return userId;
    }

    private async Task FavoriteTrackAsync(long trackId)
    {
        CloseInfoMessage();
        if (_favouritePlayListId == -1) // No favourite playlist created yet
        {
            _favouritePlayListId = await PlaylistService.CreateNewPlaylistAsync(CommonConstant.UserFavouritePlayListName, _currentUserId);
        }
        try
        {
            await PlaylistService.AddTrackToPlaylistAsync(_favouritePlayListId, trackId);

            var track = _playlist.Tracks.FirstOrDefault(t => t.TrackId == trackId);
            track.IsFavorite = true;
            _infoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} added to playlist {CommonConstant.UserFavouritePlayListName}.";
        }
        catch (DuplicateRecordException ex)
        {
            _infoMessage = ex.Message;
        }
    }

    private async Task UnfavoriteTrackAsync(long trackId)
    {
        CloseInfoMessage();
        await PlaylistService.RemoveTrackFromPlaylistAsync(_favouritePlayListId, trackId);

        var track = _playlist.Tracks.FirstOrDefault(t => t.TrackId == trackId);
        track.IsFavorite = false;
        _infoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist {CommonConstant.UserFavouritePlayListName}.";
    }

    private async Task RemoveTrackAsync(long trackId)
    {
        CloseInfoMessage();
        await PlaylistService.RemoveTrackFromPlaylistAsync(PlaylistId, trackId);

        var track = _playlist.Tracks.FirstOrDefault(t => t.TrackId == trackId);
        _playlist.Tracks.Remove(track);
        _infoMessage = $"Track {track.ArtistName} - {track.AlbumTitle} - {track.TrackName} removed from playlist.";
    }

    private void CloseInfoMessage()
    {
        _infoMessage = "";
    }

}
